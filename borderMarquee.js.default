/**
 * Created by xiamingxing on 2014/9/23.
 */
var BorderMarquee = (function () {

    var ANTI_CLOCKWISE = 0;
    var CLOCKWISE = 1;
    var SINGLE = 0;
    var DOUBLE = 1;
    var DEFAULT_OPTIONS = {
        cssText: {
            display: 'block',
            position: 'absolute',
            zIndex: 100,
            border: 'none',
            height: 0,
            width: 0
        },
        rate: 200,
        times: 3,
        autoDestroy: false,
        lineStyle: "1px solid #000",
        direction: CLOCKWISE
    };

    var buildFrames = function (type, direction, containerConf, lineStyle) {
        type = type || SINGLE;
        var height = containerConf['height'];
        var width = containerConf['width'];
        var top = containerConf['top'];
        var left = containerConf['left'];
        var frames = [];
        switch (type) {
            case SINGLE:
                frames[0] = [
                    {
                        cssText: {
                            border: 'none',
                            borderLeft: lineStyle,
                            borderTop: lineStyle
                        },
                        animation: {
                            width: width,
                            height: 0,
                            left: left,
                            top: top
                        }
                    },
                    {
                        cssText: {
                            border: 'none',
                            borderTop: lineStyle,
                            borderRight: lineStyle
                        },
                        animation: {
                            width: 0,
                            height: height,
                            left: left + width,
                            top: top
                        }
                    },
                    {
                        cssText: {
                            border: 'none',
                            borderRight: lineStyle,
                            borderBottom: lineStyle
                        },
                        animation: {
                            width: width,
                            height: 0,
                            left: left,
                            top: top + height
                        }
                    },
                    {
                        cssText: {
                            border: 'none',
                            borderBottom: lineStyle,
                            borderLeft: lineStyle
                        },
                        animation: {
                            width: 0,
                            height: height,
                            left: left,
                            top: top
                        }
                    }
                ];
                break;

            default :
                break;
        }
        return frames;
    };

    var getContainerConf = function ($container) {
        return {
            height: $container.height(),
            width: $container.width(),
            left: $container.offset()['left'],
            top: $container.offset()['top']
        }
    };

    var excute = function ($eles, frames, frameNo, rate, counter, callback) {
        frameNo = frameNo || 0;
        var linesNumber = frames.length;
        var $ele, lineFrames, lineFrame, cssText, animation;
        for (var i = 0; i < linesNumber; i++) {
            var nextFrameNo = (frameNo + 1) % frames[i].length;
            lineFrames = frames[i] || {};
            lineFrame = lineFrames[frameNo] || {};
            cssText = lineFrame['cssText'];
            animation = lineFrame['animation'];
            $eles
                .eq(i)
                .css(cssText)
                .animate(animation, rate, function () {
                    $ele = $(this);
                    if (counter > 1) {
                        excute($eles, frames, nextFrameNo, rate, counter - 1, callback);
                    }
                    else {
                        $ele.css("display", 'none');
                        callback && callback($ele);
                    }
                });
        }

    };

    var create = function (cssText, length) {
        if (!length || length <= 0) {
            throw new Error("frames length error!");
        }

        var template = '<div class="borderMarquee" style="display: none;"></div>';
        var T = [];

        for (; length--;) {
            T.push(template);
        }

        return $(T.join('')).css(cssText).appendTo('body');
    };

    var Api = function ($container, cb, opts) {

        if (!arguments.length || !$container) {
            throw new Error("contructor need arguments!");
        }

        if (typeof $container === 'string') {
            $container = $($container);
        }

        if (!($container instanceof jQuery)) {
            opts = $container;
            $container = $(opts['container']);
            cb = opts['complete'];
        }

        if (!$container.length) {
            throw new Error("can not find " + $container.selector);
        }

        opts = $.extend({}, DEFAULT_OPTIONS, opts);

        this.initial($container, cb, opts);
    };

    Api.ANTI_CLOCKWISE = ANTI_CLOCKWISE;
    Api.CLOCKWISE = CLOCKWISE;
    Api.SINGLE = SINGLE;
    Api.DOUBLE = DOUBLE;

    Api.setDefaultConfig = function (opts) {
        $.extend(DEFAULT_OPTIONS, opts);
    }

    Api.prototype = {
        constructor: Api,
        initial: function ($container, cb, opts) {
            var type = opts['type'];
            var direction = opts['direction'];
            var lineStyle = opts['lineStyle'];
            var containerConf = getContainerConf($container);
            var cssText = $.extend({}, containerConf, opts['cssText']);
            var frames = buildFrames(type, direction, containerConf, lineStyle);
            var linesNum = frames.length || 1;

            this.$eles = create(cssText, linesNum);
            this.$container = $container;
            this.containerConf = containerConf;
            this.frames = frames;
            this.complete = cb;
            this.opts = opts;
        },
        destroy: function () {
            var $eles = this.$eles;
            $eles && $eles.length && $eles.remove();
        },

        start: function () {
            var that = this;
            var opts = this.opts;
            var $eles = this.$eles;
            var frames = this.frames;
            var complete = this.opts['complete'];
            var rate = opts['rate'];
            var times = opts['times'];
            var autoDestroy = opts['autoDestroy'];
            var frameLength = frames[0].length;
            var counter = times * frameLength;
            if ($eles.is(':animated')) {
                $eles.stop();
            }
            excute($eles, frames, 0, rate, counter, function ($eles) {
                complete && complete($eles);
                autoDestroy && that.destroy();
            });
        }
    };

    return Api;

})();